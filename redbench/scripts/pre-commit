#!/bin/sh

# Store the initial directory
INITIAL_DIR=$(pwd)

# Set up a trap to ensure we return to the initial directory on exit
cleanup() {
  cd "$INITIAL_DIR" || exit 1
}
trap cleanup EXIT

# Change to the repository root directory
cd "$(git rev-parse --show-toplevel)" || exit 1

# Check if we're in the right directory
if [ ! -d "redbench" ]; then
  echo "Error: Not in the expected repository structure"
  exit 1
fi

# Change to the redbench directory for all operations
cd redbench || exit 1

# Run go fmt on all Go files in redbench
echo "Running go fmt..."
go fmt ./...
GO_FMT_EXIT_CODE=$?
if [ $GO_FMT_EXIT_CODE -ne 0 ]; then
  echo "go fmt failed! Fix the errors before committing."
  exit 1
fi

# Run go vet to check for common mistakes
echo "Running go vet..."
go vet ./...
GO_VET_EXIT_CODE=$?
if [ $GO_VET_EXIT_CODE -ne 0 ]; then
  echo "go vet failed! Fix the errors before committing."
  exit 1
fi

# Run staticcheck to find issues including dead code
if command -v staticcheck >/dev/null 2>&1; then
  echo "Running staticcheck..."
  staticcheck ./...
  STATICCHECK_EXIT_CODE=$?
  if [ $STATICCHECK_EXIT_CODE -ne 0 ]; then
    echo "staticcheck failed! Fix the errors before committing."
    exit 1
  fi
else
  echo "Warning: staticcheck not found. Install with: go install honnef.co/go/tools/cmd/staticcheck@latest"
fi

# Run tests to ensure everything works
echo "Running tests..."
go test -short ./...
TEST_EXIT_CODE=$?
if [ $TEST_EXIT_CODE -ne 0 ]; then
  echo "Tests failed! Fix the failing tests before committing."
  exit 1
fi

# Return to repository root for the remaining checks
cd ..

# Run golangci-lint if available
if command -v golangci-lint >/dev/null 2>&1; then
  echo "Running golangci-lint..."
  (cd redbench && golangci-lint run)
  LINT_EXIT_CODE=$?
  if [ $LINT_EXIT_CODE -ne 0 ]; then
    echo "golangci-lint failed! Fix the errors before committing."
    exit 1
  fi
else
  echo "Warning: golangci-lint not found. Skipping linting checks."
fi

# Check for trailing whitespace and missing newlines
echo "Checking for formatting issues..."
for file in $(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(go|md|yaml|yml)$'); do
  # Check if file ends with a newline
  if [ -f "$file" ] && [ -s "$file" ] && [ "$(tail -c 1 "$file" | wc -l)" -eq 0 ]; then
    echo "Error: $file does not end with a newline"
    exit 1
  fi
  
  # Check for trailing whitespace
  if grep -q "[[:blank:]]$" "$file"; then
    echo "Error: $file contains trailing whitespace"
    exit 1
  fi
done

echo "Pre-commit checks passed!"
exit 0